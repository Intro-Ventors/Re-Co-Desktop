#pragma once

#define WIN32_LEAN_AND_MEAN // Exclude rarely-used stuff from Windows headers
// Windows Header Files
#include <windows.h>

#include <vector>

#include <d3d11.h>
#include <dxgi1_2.h>

#include "../Window.hpp"

namespace Scipper
{
	/**
	 * BGRA 8bit structure.
	 * This structure contains information about a single pixel generated by the capturing API.
	 */
	struct BGRA8 { uint8_t B, G, R, A; };

	/**
	 * Bitmap structure.
	 * This object contains information about a single bitmap image of the screen.
	 */
	struct Bitmap
	{
		std::vector<BGRA8> m_Buffer = {};
		uint32_t m_Width = 0;
		uint32_t m_Height = 0;
	};

	/**
	 * Desktop duplication class.
	 * This class contains the logic required to capture a single monitor.
	 */
	class DesktopDuplication final
	{
	public:
		/**
		 * Default constructor.
		 */
		DesktopDuplication();

		/**
		 * Default destructor.
		 */
		~DesktopDuplication();

		/**
		 * Generate a new capture.
		 *
		 * @return The captured bitmap image.
		 */
		Bitmap& capture();

	private:
		DXGI_OUTPUT_DESC m_OutputDesc;
		Bitmap m_Bitmap = {};

		ID3D11Device* m_pDevice = nullptr;
		ID3D11DeviceContext* m_pDeviceContext = nullptr;
		IDXGIOutputDuplication* m_pDesktopDuplication = nullptr;

		int32_t m_FrameNumber = 0;
		bool m_bHaveFrameLock = false;
	};
}